// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: public_input.proto

package publicpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntrypointClient is the client API for Entrypoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntrypointClient interface {
	UnauthorizedTransactionClassifier(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error)
	UnauthorizedTransactionFeatureStorage(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*FeatureStorageResponse, error)
}

type entrypointClient struct {
	cc grpc.ClientConnInterface
}

func NewEntrypointClient(cc grpc.ClientConnInterface) EntrypointClient {
	return &entrypointClient{cc}
}

func (c *entrypointClient) UnauthorizedTransactionClassifier(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error) {
	out := new(InferenceResponse)
	err := c.cc.Invoke(ctx, "/main.Entrypoint/UnauthorizedTransactionClassifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entrypointClient) UnauthorizedTransactionFeatureStorage(ctx context.Context, in *DatabaseRequest, opts ...grpc.CallOption) (*FeatureStorageResponse, error) {
	out := new(FeatureStorageResponse)
	err := c.cc.Invoke(ctx, "/main.Entrypoint/UnauthorizedTransactionFeatureStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntrypointServer is the server API for Entrypoint service.
// All implementations must embed UnimplementedEntrypointServer
// for forward compatibility
type EntrypointServer interface {
	UnauthorizedTransactionClassifier(context.Context, *InferenceRequest) (*InferenceResponse, error)
	UnauthorizedTransactionFeatureStorage(context.Context, *DatabaseRequest) (*FeatureStorageResponse, error)
	mustEmbedUnimplementedEntrypointServer()
}

// UnimplementedEntrypointServer must be embedded to have forward compatible implementations.
type UnimplementedEntrypointServer struct {
}

func (UnimplementedEntrypointServer) UnauthorizedTransactionClassifier(context.Context, *InferenceRequest) (*InferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizedTransactionClassifier not implemented")
}
func (UnimplementedEntrypointServer) UnauthorizedTransactionFeatureStorage(context.Context, *DatabaseRequest) (*FeatureStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizedTransactionFeatureStorage not implemented")
}
func (UnimplementedEntrypointServer) mustEmbedUnimplementedEntrypointServer() {}

// UnsafeEntrypointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntrypointServer will
// result in compilation errors.
type UnsafeEntrypointServer interface {
	mustEmbedUnimplementedEntrypointServer()
}

func RegisterEntrypointServer(s grpc.ServiceRegistrar, srv EntrypointServer) {
	s.RegisterService(&Entrypoint_ServiceDesc, srv)
}

func _Entrypoint_UnauthorizedTransactionClassifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntrypointServer).UnauthorizedTransactionClassifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Entrypoint/UnauthorizedTransactionClassifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntrypointServer).UnauthorizedTransactionClassifier(ctx, req.(*InferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entrypoint_UnauthorizedTransactionFeatureStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntrypointServer).UnauthorizedTransactionFeatureStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Entrypoint/UnauthorizedTransactionFeatureStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntrypointServer).UnauthorizedTransactionFeatureStorage(ctx, req.(*DatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entrypoint_ServiceDesc is the grpc.ServiceDesc for Entrypoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entrypoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Entrypoint",
	HandlerType: (*EntrypointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnauthorizedTransactionClassifier",
			Handler:    _Entrypoint_UnauthorizedTransactionClassifier_Handler,
		},
		{
			MethodName: "UnauthorizedTransactionFeatureStorage",
			Handler:    _Entrypoint_UnauthorizedTransactionFeatureStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public_input.proto",
}
