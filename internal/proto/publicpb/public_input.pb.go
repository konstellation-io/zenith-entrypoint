// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: public_input.proto

package publicpb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountActivated                           *bool    `protobuf:"varint,1,opt,name=account_activated,json=accountActivated,proto3,oneof" json:"account_activated,omitempty"`
	AccountAvailableBalance                    *float32 `protobuf:"fixed32,2,opt,name=account_available_balance,json=accountAvailableBalance,proto3,oneof" json:"account_available_balance,omitempty"`
	AccountKey                                 *string  `protobuf:"bytes,3,opt,name=account_key,json=accountKey,proto3,oneof" json:"account_key,omitempty"`
	AccountLedgerBalance                       *float32 `protobuf:"fixed32,4,opt,name=account_ledger_balance,json=accountLedgerBalance,proto3,oneof" json:"account_ledger_balance,omitempty"`
	AccountOpenDate                            *string  `protobuf:"bytes,5,opt,name=account_open_date,json=accountOpenDate,proto3,oneof" json:"account_open_date,omitempty"`
	AccountOverdraftLimit                      *float32 `protobuf:"fixed32,6,opt,name=account_overdraft_limit,json=accountOverdraftLimit,proto3,oneof" json:"account_overdraft_limit,omitempty"`
	AccountReopenDate                          *string  `protobuf:"bytes,7,opt,name=account_reopen_date,json=accountReopenDate,proto3,oneof" json:"account_reopen_date,omitempty"`
	AccountStatus                              *string  `protobuf:"bytes,8,opt,name=account_status,json=accountStatus,proto3,oneof" json:"account_status,omitempty"`
	AccountType                                *string  `protobuf:"bytes,9,opt,name=account_type,json=accountType,proto3,oneof" json:"account_type,omitempty"`
	AuthenticationMethodUsed                   *string  `protobuf:"bytes,10,opt,name=authentication_method_used,json=authenticationMethodUsed,proto3,oneof" json:"authentication_method_used,omitempty"`
	AuthorizationDecisionCd                    *string  `protobuf:"bytes,11,opt,name=authorization_decision_cd,json=authorizationDecisionCd,proto3,oneof" json:"authorization_decision_cd,omitempty"`
	BankName                                   *string  `protobuf:"bytes,12,opt,name=bank_name,json=bankName,proto3,oneof" json:"bank_name,omitempty"`
	CardActivationDate                         *string  `protobuf:"bytes,13,opt,name=card_activation_date,json=cardActivationDate,proto3,oneof" json:"card_activation_date,omitempty"`
	CardAddressCity                            *string  `protobuf:"bytes,14,opt,name=card_address_city,json=cardAddressCity,proto3,oneof" json:"card_address_city,omitempty"`
	CardAddressLatitude                        *float32 `protobuf:"fixed32,15,opt,name=card_address_latitude,json=cardAddressLatitude,proto3,oneof" json:"card_address_latitude,omitempty"`
	CardAddressLine_1                          *string  `protobuf:"bytes,16,opt,name=card_address_line_1,json=cardAddressLine1,proto3,oneof" json:"card_address_line_1,omitempty"`
	CardAddressLine_2                          *string  `protobuf:"bytes,17,opt,name=card_address_line_2,json=cardAddressLine2,proto3,oneof" json:"card_address_line_2,omitempty"`
	CardAddressLongitude                       *float32 `protobuf:"fixed32,18,opt,name=card_address_longitude,json=cardAddressLongitude,proto3,oneof" json:"card_address_longitude,omitempty"`
	CardAddressState                           *string  `protobuf:"bytes,19,opt,name=card_address_state,json=cardAddressState,proto3,oneof" json:"card_address_state,omitempty"`
	CardAddressZip                             *string  `protobuf:"bytes,20,opt,name=card_address_zip,json=cardAddressZip,proto3,oneof" json:"card_address_zip,omitempty"`
	CardAssociation                            *string  `protobuf:"bytes,21,opt,name=card_association,json=cardAssociation,proto3,oneof" json:"card_association,omitempty"`
	CardAttachmentDate                         *string  `protobuf:"bytes,22,opt,name=card_attachment_date,json=cardAttachmentDate,proto3,oneof" json:"card_attachment_date,omitempty"`
	CardBin                                    *string  `protobuf:"bytes,23,opt,name=card_bin,json=cardBin,proto3,oneof" json:"card_bin,omitempty"`
	CardBranch                                 *string  `protobuf:"bytes,24,opt,name=card_branch,json=cardBranch,proto3,oneof" json:"card_branch,omitempty"`
	CardClosedDate                             *string  `protobuf:"bytes,25,opt,name=card_closed_date,json=cardClosedDate,proto3,oneof" json:"card_closed_date,omitempty"`
	CardDeviceAcquiringInstitutionId           *string  `protobuf:"bytes,26,opt,name=card_device_acquiring_institution_id,json=cardDeviceAcquiringInstitutionId,proto3,oneof" json:"card_device_acquiring_institution_id,omitempty"`
	CardDeviceBranch                           *string  `protobuf:"bytes,27,opt,name=card_device_branch,json=cardDeviceBranch,proto3,oneof" json:"card_device_branch,omitempty"`
	CardDeviceCardAcceptorId                   *string  `protobuf:"bytes,28,opt,name=card_device_card_acceptor_id,json=cardDeviceCardAcceptorId,proto3,oneof" json:"card_device_card_acceptor_id,omitempty"`
	CardDeviceCity                             *string  `protobuf:"bytes,29,opt,name=card_device_city,json=cardDeviceCity,proto3,oneof" json:"card_device_city,omitempty"`
	CardDeviceCountryCd                        *string  `protobuf:"bytes,30,opt,name=card_device_country_cd,json=cardDeviceCountryCd,proto3,oneof" json:"card_device_country_cd,omitempty"`
	CardDeviceMerchantCategoryCd               *string  `protobuf:"bytes,31,opt,name=card_device_merchant_category_cd,json=cardDeviceMerchantCategoryCd,proto3,oneof" json:"card_device_merchant_category_cd,omitempty"`
	CardDeviceNameLocation                     *string  `protobuf:"bytes,32,opt,name=card_device_name_location,json=cardDeviceNameLocation,proto3,oneof" json:"card_device_name_location,omitempty"`
	CardDeviceOnUsInd                          *bool    `protobuf:"varint,33,opt,name=card_device_on_us_ind,json=cardDeviceOnUsInd,proto3,oneof" json:"card_device_on_us_ind,omitempty"`
	CardDeviceOwnerName                        *string  `protobuf:"bytes,34,opt,name=card_device_owner_name,json=cardDeviceOwnerName,proto3,oneof" json:"card_device_owner_name,omitempty"`
	CardDevicePanEntryModeCd                   *string  `protobuf:"bytes,35,opt,name=card_device_pan_entry_mode_cd,json=cardDevicePanEntryModeCd,proto3,oneof" json:"card_device_pan_entry_mode_cd,omitempty"`
	CardDevicePinEntryCapability               *string  `protobuf:"bytes,36,opt,name=card_device_pin_entry_capability,json=cardDevicePinEntryCapability,proto3,oneof" json:"card_device_pin_entry_capability,omitempty"`
	CardDevicePosTerminalAttendanceIndicatorCd *string  `protobuf:"bytes,37,opt,name=card_device_pos_terminal_attendance_indicator_cd,json=cardDevicePosTerminalAttendanceIndicatorCd,proto3,oneof" json:"card_device_pos_terminal_attendance_indicator_cd,omitempty"`
	CardDeviceState                            *string  `protobuf:"bytes,38,opt,name=card_device_state,json=cardDeviceState,proto3,oneof" json:"card_device_state,omitempty"`
	CardDeviceTerminalId                       *string  `protobuf:"bytes,39,opt,name=card_device_terminal_id,json=cardDeviceTerminalId,proto3,oneof" json:"card_device_terminal_id,omitempty"`
	CardDeviceTransactionCategoryCd            *string  `protobuf:"bytes,40,opt,name=card_device_transaction_category_cd,json=cardDeviceTransactionCategoryCd,proto3,oneof" json:"card_device_transaction_category_cd,omitempty"`
	CardDeviceZip                              *string  `protobuf:"bytes,41,opt,name=card_device_zip,json=cardDeviceZip,proto3,oneof" json:"card_device_zip,omitempty"`
	CardExpirationDate                         *string  `protobuf:"bytes,42,opt,name=card_expiration_date,json=cardExpirationDate,proto3,oneof" json:"card_expiration_date,omitempty"`
	CardIccCardInd                             *bool    `protobuf:"varint,43,opt,name=card_icc_card_ind,json=cardIccCardInd,proto3,oneof" json:"card_icc_card_ind,omitempty"`
	CardIssuedDate                             *string  `protobuf:"bytes,44,opt,name=card_issued_date,json=cardIssuedDate,proto3,oneof" json:"card_issued_date,omitempty"`
	CardKey                                    *string  `protobuf:"bytes,45,opt,name=card_key,json=cardKey,proto3,oneof" json:"card_key,omitempty"`
	CardPanForDisplay                          *string  `protobuf:"bytes,46,opt,name=card_pan_for_display,json=cardPanForDisplay,proto3,oneof" json:"card_pan_for_display,omitempty"`
	CardPresenceInd                            *bool    `protobuf:"varint,47,opt,name=card_presence_ind,json=cardPresenceInd,proto3,oneof" json:"card_presence_ind,omitempty"`
	CardPurpose                                *int32   `protobuf:"varint,48,opt,name=card_purpose,json=cardPurpose,proto3,oneof" json:"card_purpose,omitempty"`
	CardStatus                                 *string  `protobuf:"bytes,49,opt,name=card_status,json=cardStatus,proto3,oneof" json:"card_status,omitempty"`
	CardType                                   *string  `protobuf:"bytes,50,opt,name=card_type,json=cardType,proto3,oneof" json:"card_type,omitempty"`
	CardVerificationTypeCd                     *string  `protobuf:"bytes,51,opt,name=card_verification_type_cd,json=cardVerificationTypeCd,proto3,oneof" json:"card_verification_type_cd,omitempty"`
	CardholderPresenceIndicatorCd              *string  `protobuf:"bytes,52,opt,name=cardholder_presence_indicator_cd,json=cardholderPresenceIndicatorCd,proto3,oneof" json:"cardholder_presence_indicator_cd,omitempty"`
	CashbackAmountAsEntered                    *float32 `protobuf:"fixed32,53,opt,name=cashback_amount_as_entered,json=cashbackAmountAsEntered,proto3,oneof" json:"cashback_amount_as_entered,omitempty"`
	CashbackAmountInNormalizedCurrency         *float32 `protobuf:"fixed32,54,opt,name=cashback_amount_in_normalized_currency,json=cashbackAmountInNormalizedCurrency,proto3,oneof" json:"cashback_amount_in_normalized_currency,omitempty"`
	CashbackInd                                *bool    `protobuf:"varint,55,opt,name=cashback_ind,json=cashbackInd,proto3,oneof" json:"cashback_ind,omitempty"`
	Cb_18                                      *bool    `protobuf:"varint,56,opt,name=cb_18,json=cb18,proto3,oneof" json:"cb_18,omitempty"`
	Cb_19                                      *bool    `protobuf:"varint,57,opt,name=cb_19,json=cb19,proto3,oneof" json:"cb_19,omitempty"`
	Cb_24                                      *bool    `protobuf:"varint,58,opt,name=cb_24,json=cb24,proto3,oneof" json:"cb_24,omitempty"`
	Cb_25                                      *bool    `protobuf:"varint,59,opt,name=cb_25,json=cb25,proto3,oneof" json:"cb_25,omitempty"`
	Cd_1                                       *string  `protobuf:"bytes,60,opt,name=cd_1,json=cd1,proto3,oneof" json:"cd_1,omitempty"`
	Cd_10                                      *string  `protobuf:"bytes,61,opt,name=cd_10,json=cd10,proto3,oneof" json:"cd_10,omitempty"`
	Cd_11                                      *string  `protobuf:"bytes,62,opt,name=cd_11,json=cd11,proto3,oneof" json:"cd_11,omitempty"`
	Cd_19                                      *string  `protobuf:"bytes,63,opt,name=cd_19,json=cd19,proto3,oneof" json:"cd_19,omitempty"`
	Channel                                    *string  `protobuf:"bytes,64,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	CipApprovalDate                            *string  `protobuf:"bytes,65,opt,name=cip_approval_date,json=cipApprovalDate,proto3,oneof" json:"cip_approval_date,omitempty"`
	CipStatus                                  *string  `protobuf:"bytes,66,opt,name=cip_status,json=cipStatus,proto3,oneof" json:"cip_status,omitempty"`
	ContactlessInd                             *bool    `protobuf:"varint,67,opt,name=contactless_ind,json=contactlessInd,proto3,oneof" json:"contactless_ind,omitempty"`
	CreationDate                               *string  `protobuf:"bytes,68,opt,name=creation_date,json=creationDate,proto3,oneof" json:"creation_date,omitempty"`
	Cs_150                                     *string  `protobuf:"bytes,69,opt,name=cs_150,json=cs150,proto3,oneof" json:"cs_150,omitempty"`
	Cs_151                                     *string  `protobuf:"bytes,70,opt,name=cs_151,json=cs151,proto3,oneof" json:"cs_151,omitempty"`
	Cs_152                                     *string  `protobuf:"bytes,71,opt,name=cs_152,json=cs152,proto3,oneof" json:"cs_152,omitempty"`
	Cs_153                                     *string  `protobuf:"bytes,72,opt,name=cs_153,json=cs153,proto3,oneof" json:"cs_153,omitempty"`
	Cs_154                                     *string  `protobuf:"bytes,73,opt,name=cs_154,json=cs154,proto3,oneof" json:"cs_154,omitempty"`
	Cs_155                                     *string  `protobuf:"bytes,74,opt,name=cs_155,json=cs155,proto3,oneof" json:"cs_155,omitempty"`
	Cs_156                                     *string  `protobuf:"bytes,75,opt,name=cs_156,json=cs156,proto3,oneof" json:"cs_156,omitempty"`
	Cs_157                                     *string  `protobuf:"bytes,76,opt,name=cs_157,json=cs157,proto3,oneof" json:"cs_157,omitempty"`
	Cs_158                                     *string  `protobuf:"bytes,77,opt,name=cs_158,json=cs158,proto3,oneof" json:"cs_158,omitempty"`
	Cs_161                                     *string  `protobuf:"bytes,78,opt,name=cs_161,json=cs161,proto3,oneof" json:"cs_161,omitempty"`
	Cs_162                                     *string  `protobuf:"bytes,79,opt,name=cs_162,json=cs162,proto3,oneof" json:"cs_162,omitempty"`
	Cs_163                                     *string  `protobuf:"bytes,80,opt,name=cs_163,json=cs163,proto3,oneof" json:"cs_163,omitempty"`
	Cs_164                                     *string  `protobuf:"bytes,81,opt,name=cs_164,json=cs164,proto3,oneof" json:"cs_164,omitempty"`
	Cs_165                                     *string  `protobuf:"bytes,82,opt,name=cs_165,json=cs165,proto3,oneof" json:"cs_165,omitempty"`
	Cs_169                                     *string  `protobuf:"bytes,83,opt,name=cs_169,json=cs169,proto3,oneof" json:"cs_169,omitempty"`
	Cs_36                                      *string  `protobuf:"bytes,84,opt,name=cs_36,json=cs36,proto3,oneof" json:"cs_36,omitempty"`
	Cs_37                                      *string  `protobuf:"bytes,85,opt,name=cs_37,json=cs37,proto3,oneof" json:"cs_37,omitempty"`
	Cs_38                                      *string  `protobuf:"bytes,86,opt,name=cs_38,json=cs38,proto3,oneof" json:"cs_38,omitempty"`
	Cs_39                                      *string  `protobuf:"bytes,87,opt,name=cs_39,json=cs39,proto3,oneof" json:"cs_39,omitempty"`
	Cs_40                                      *string  `protobuf:"bytes,88,opt,name=cs_40,json=cs40,proto3,oneof" json:"cs_40,omitempty"`
	Cs_46                                      *string  `protobuf:"bytes,89,opt,name=cs_46,json=cs46,proto3,oneof" json:"cs_46,omitempty"`
	Cs_47                                      *string  `protobuf:"bytes,90,opt,name=cs_47,json=cs47,proto3,oneof" json:"cs_47,omitempty"`
	Cs_75                                      *string  `protobuf:"bytes,91,opt,name=cs_75,json=cs75,proto3,oneof" json:"cs_75,omitempty"`
	Csl_10                                     *string  `protobuf:"bytes,92,opt,name=csl_10,json=csl10,proto3,oneof" json:"csl_10,omitempty"`
	Csl_21                                     *string  `protobuf:"bytes,93,opt,name=csl_21,json=csl21,proto3,oneof" json:"csl_21,omitempty"`
	Csl_22                                     *string  `protobuf:"bytes,94,opt,name=csl_22,json=csl22,proto3,oneof" json:"csl_22,omitempty"`
	Csl_23                                     *string  `protobuf:"bytes,95,opt,name=csl_23,json=csl23,proto3,oneof" json:"csl_23,omitempty"`
	Csl_24                                     *string  `protobuf:"bytes,96,opt,name=csl_24,json=csl24,proto3,oneof" json:"csl_24,omitempty"`
	CurrencyCd                                 *string  `protobuf:"bytes,97,opt,name=currency_cd,json=currencyCd,proto3,oneof" json:"currency_cd,omitempty"`
	ElectronicCommerceFlag                     *string  `protobuf:"bytes,98,opt,name=electronic_commerce_flag,json=electronicCommerceFlag,proto3,oneof" json:"electronic_commerce_flag,omitempty"`
	EmbossedCardOwnerName                      *string  `protobuf:"bytes,99,opt,name=embossed_card_owner_name,json=embossedCardOwnerName,proto3,oneof" json:"embossed_card_owner_name,omitempty"`
	FeeAdvantagePlan                           *bool    `protobuf:"varint,100,opt,name=fee_advantage_plan,json=feeAdvantagePlan,proto3,oneof" json:"fee_advantage_plan,omitempty"`
	FeeAmountInOriginalCurrency                *float32 `protobuf:"fixed32,101,opt,name=fee_amount_in_original_currency,json=feeAmountInOriginalCurrency,proto3,oneof" json:"fee_amount_in_original_currency,omitempty"`
	FeeAmountInRegionNormalizedCurrency        *float32 `protobuf:"fixed32,102,opt,name=fee_amount_in_region_normalized_currency,json=feeAmountInRegionNormalizedCurrency,proto3,oneof" json:"fee_amount_in_region_normalized_currency,omitempty"`
	LimitedUseAccount                          *bool    `protobuf:"varint,103,opt,name=limited_use_account,json=limitedUseAccount,proto3,oneof" json:"limited_use_account,omitempty"`
	MessagePurpose                             *string  `protobuf:"bytes,104,opt,name=message_purpose,json=messagePurpose,proto3,oneof" json:"message_purpose,omitempty"`
	MessageType                                *string  `protobuf:"bytes,105,opt,name=message_type,json=messageType,proto3,oneof" json:"message_type,omitempty"`
	NetworkId                                  *string  `protobuf:"bytes,106,opt,name=network_id,json=networkId,proto3,oneof" json:"network_id,omitempty"`
	OnlineOriginatedAccount                    *bool    `protobuf:"varint,107,opt,name=online_originated_account,json=onlineOriginatedAccount,proto3,oneof" json:"online_originated_account,omitempty"`
	OnlineTransactionIndicator                 *bool    `protobuf:"varint,108,opt,name=online_transaction_indicator,json=onlineTransactionIndicator,proto3,oneof" json:"online_transaction_indicator,omitempty"`
	PanCountryCd                               *string  `protobuf:"bytes,109,opt,name=pan_country_cd,json=panCountryCd,proto3,oneof" json:"pan_country_cd,omitempty"`
	PartnerEmployee                            *bool    `protobuf:"varint,110,opt,name=partner_employee,json=partnerEmployee,proto3,oneof" json:"partner_employee,omitempty"`
	PartyAddressLine_1                         *string  `protobuf:"bytes,111,opt,name=party_address_line_1,json=partyAddressLine1,proto3,oneof" json:"party_address_line_1,omitempty"`
	PartyAddressLine_2                         *string  `protobuf:"bytes,112,opt,name=party_address_line_2,json=partyAddressLine2,proto3,oneof" json:"party_address_line_2,omitempty"`
	PartyAddressUpdateDate                     *string  `protobuf:"bytes,113,opt,name=party_address_update_date,json=partyAddressUpdateDate,proto3,oneof" json:"party_address_update_date,omitempty"`
	PartyBirthIncorpDate                       *string  `protobuf:"bytes,114,opt,name=party_birth_incorp_date,json=partyBirthIncorpDate,proto3,oneof" json:"party_birth_incorp_date,omitempty"`
	PartyCity                                  *string  `protobuf:"bytes,115,opt,name=party_city,json=partyCity,proto3,oneof" json:"party_city,omitempty"`
	PartyCountryCd                             *string  `protobuf:"bytes,116,opt,name=party_country_cd,json=partyCountryCd,proto3,oneof" json:"party_country_cd,omitempty"`
	PartyEmail                                 *string  `protobuf:"bytes,117,opt,name=party_email,json=partyEmail,proto3,oneof" json:"party_email,omitempty"`
	PartyEmailUpdateDate                       *string  `protobuf:"bytes,118,opt,name=party_email_update_date,json=partyEmailUpdateDate,proto3,oneof" json:"party_email_update_date,omitempty"`
	PartyInfoUpdateDate                        *string  `protobuf:"bytes,119,opt,name=party_info_update_date,json=partyInfoUpdateDate,proto3,oneof" json:"party_info_update_date,omitempty"`
	PartyKey                                   *string  `protobuf:"bytes,120,opt,name=party_key,json=partyKey,proto3,oneof" json:"party_key,omitempty"`
	PartyLastName                              *string  `protobuf:"bytes,121,opt,name=party_last_name,json=partyLastName,proto3,oneof" json:"party_last_name,omitempty"`
	PartyLatitude                              *float32 `protobuf:"fixed32,122,opt,name=party_latitude,json=partyLatitude,proto3,oneof" json:"party_latitude,omitempty"`
	PartyLongitude                             *float32 `protobuf:"fixed32,123,opt,name=party_longitude,json=partyLongitude,proto3,oneof" json:"party_longitude,omitempty"`
	PartyName                                  *string  `protobuf:"bytes,124,opt,name=party_name,json=partyName,proto3,oneof" json:"party_name,omitempty"`
	PartyNameUpdateDate                        *string  `protobuf:"bytes,125,opt,name=party_name_update_date,json=partyNameUpdateDate,proto3,oneof" json:"party_name_update_date,omitempty"`
	PartyOnlineServiceJoinDate                 *string  `protobuf:"bytes,126,opt,name=party_online_service_join_date,json=partyOnlineServiceJoinDate,proto3,oneof" json:"party_online_service_join_date,omitempty"`
	PartyPhone                                 *string  `protobuf:"bytes,127,opt,name=party_phone,json=partyPhone,proto3,oneof" json:"party_phone,omitempty"`
	PartyPhoneUpdateDate                       *string  `protobuf:"bytes,128,opt,name=party_phone_update_date,json=partyPhoneUpdateDate,proto3,oneof" json:"party_phone_update_date,omitempty"`
	PartyState                                 *string  `protobuf:"bytes,129,opt,name=party_state,json=partyState,proto3,oneof" json:"party_state,omitempty"`
	PartyZip                                   *string  `protobuf:"bytes,130,opt,name=party_zip,json=partyZip,proto3,oneof" json:"party_zip,omitempty"`
	PaycardEnrollmentDate                      *string  `protobuf:"bytes,131,opt,name=paycard_enrollment_date,json=paycardEnrollmentDate,proto3,oneof" json:"paycard_enrollment_date,omitempty"`
	ProgramBranchAddressCity                   *string  `protobuf:"bytes,132,opt,name=program_branch_address_city,json=programBranchAddressCity,proto3,oneof" json:"program_branch_address_city,omitempty"`
	ProgramBranchAddressLine_1                 *string  `protobuf:"bytes,133,opt,name=program_branch_address_line_1,json=programBranchAddressLine1,proto3,oneof" json:"program_branch_address_line_1,omitempty"`
	ProgramBranchAddressLine_2                 *string  `protobuf:"bytes,134,opt,name=program_branch_address_line_2,json=programBranchAddressLine2,proto3,oneof" json:"program_branch_address_line_2,omitempty"`
	ProgramBranchAddressState                  *string  `protobuf:"bytes,135,opt,name=program_branch_address_state,json=programBranchAddressState,proto3,oneof" json:"program_branch_address_state,omitempty"`
	ProgramBranchAddressZip                    *string  `protobuf:"bytes,136,opt,name=program_branch_address_zip,json=programBranchAddressZip,proto3,oneof" json:"program_branch_address_zip,omitempty"`
	ProgramBranchLatitude                      *float32 `protobuf:"fixed32,137,opt,name=program_branch_latitude,json=programBranchLatitude,proto3,oneof" json:"program_branch_latitude,omitempty"`
	ProgramBranchLongitude                     *float32 `protobuf:"fixed32,138,opt,name=program_branch_longitude,json=programBranchLongitude,proto3,oneof" json:"program_branch_longitude,omitempty"`
	ProgramBranchVisible                       *bool    `protobuf:"varint,139,opt,name=program_branch_visible,json=programBranchVisible,proto3,oneof" json:"program_branch_visible,omitempty"`
	ProgramChannelName                         *string  `protobuf:"bytes,140,opt,name=program_channel_name,json=programChannelName,proto3,oneof" json:"program_channel_name,omitempty"`
	ProgramParentPartnerName                   *string  `protobuf:"bytes,141,opt,name=program_parent_partner_name,json=programParentPartnerName,proto3,oneof" json:"program_parent_partner_name,omitempty"`
	ProgramPartnerBranchName                   *string  `protobuf:"bytes,142,opt,name=program_partner_branch_name,json=programPartnerBranchName,proto3,oneof" json:"program_partner_branch_name,omitempty"`
	ProgramPartnerName                         *string  `protobuf:"bytes,143,opt,name=program_partner_name,json=programPartnerName,proto3,oneof" json:"program_partner_name,omitempty"`
	RecurringPaymentIndicator                  *int64   `protobuf:"varint,144,opt,name=recurring_payment_indicator,json=recurringPaymentIndicator,proto3,oneof" json:"recurring_payment_indicator,omitempty"`
	RejectedTransactionInd                     *bool    `protobuf:"varint,145,opt,name=rejected_transaction_ind,json=rejectedTransactionInd,proto3,oneof" json:"rejected_transaction_ind,omitempty"`
	RejectedTypeCd                             *string  `protobuf:"bytes,146,opt,name=rejected_type_cd,json=rejectedTypeCd,proto3,oneof" json:"rejected_type_cd,omitempty"`
	RequestedAmountAsEntered                   *float32 `protobuf:"fixed32,147,opt,name=requested_amount_as_entered,json=requestedAmountAsEntered,proto3,oneof" json:"requested_amount_as_entered,omitempty"`
	RequestedAmountInRegionNormalizedCurrency  *float32 `protobuf:"fixed32,148,opt,name=requested_amount_in_region_normalized_currency,json=requestedAmountInRegionNormalizedCurrency,proto3,oneof" json:"requested_amount_in_region_normalized_currency,omitempty"`
	RequestedAmountNormalizedCurrency          *float32 `protobuf:"fixed32,149,opt,name=requested_amount_normalized_currency,json=requestedAmountNormalizedCurrency,proto3,oneof" json:"requested_amount_normalized_currency,omitempty"`
	ResendDueToFailureInd                      *bool    `protobuf:"varint,150,opt,name=resend_due_to_failure_ind,json=resendDueToFailureInd,proto3,oneof" json:"resend_due_to_failure_ind,omitempty"`
	Secure_3DResponseCd                        *string  `protobuf:"bytes,151,opt,name=secure_3_d_response_cd,json=secure3DResponseCd,proto3,oneof" json:"secure_3_d_response_cd,omitempty"`
	ShippingModifiedDate                       *string  `protobuf:"bytes,152,opt,name=shipping_modified_date,json=shippingModifiedDate,proto3,oneof" json:"shipping_modified_date,omitempty"`
	SoldByBranchAddressCity                    *string  `protobuf:"bytes,153,opt,name=sold_by_branch_address_city,json=soldByBranchAddressCity,proto3,oneof" json:"sold_by_branch_address_city,omitempty"`
	SoldByBranchAddressLine_1                  *string  `protobuf:"bytes,154,opt,name=sold_by_branch_address_line_1,json=soldByBranchAddressLine1,proto3,oneof" json:"sold_by_branch_address_line_1,omitempty"`
	SoldByBranchAddressLine_2                  *string  `protobuf:"bytes,155,opt,name=sold_by_branch_address_line_2,json=soldByBranchAddressLine2,proto3,oneof" json:"sold_by_branch_address_line_2,omitempty"`
	SoldByBranchAddressState                   *string  `protobuf:"bytes,156,opt,name=sold_by_branch_address_state,json=soldByBranchAddressState,proto3,oneof" json:"sold_by_branch_address_state,omitempty"`
	SoldByBranchAddressZip                     *string  `protobuf:"bytes,157,opt,name=sold_by_branch_address_zip,json=soldByBranchAddressZip,proto3,oneof" json:"sold_by_branch_address_zip,omitempty"`
	SoldByBranchLatitude                       *float32 `protobuf:"fixed32,158,opt,name=sold_by_branch_latitude,json=soldByBranchLatitude,proto3,oneof" json:"sold_by_branch_latitude,omitempty"`
	SoldByBranchLongitude                      *float32 `protobuf:"fixed32,159,opt,name=sold_by_branch_longitude,json=soldByBranchLongitude,proto3,oneof" json:"sold_by_branch_longitude,omitempty"`
	SoldByBranchVisible                        *bool    `protobuf:"varint,160,opt,name=sold_by_branch_visible,json=soldByBranchVisible,proto3,oneof" json:"sold_by_branch_visible,omitempty"`
	SoldByChannelName                          *string  `protobuf:"bytes,161,opt,name=sold_by_channel_name,json=soldByChannelName,proto3,oneof" json:"sold_by_channel_name,omitempty"`
	SoldByParentPartnerName                    *string  `protobuf:"bytes,162,opt,name=sold_by_parent_partner_name,json=soldByParentPartnerName,proto3,oneof" json:"sold_by_parent_partner_name,omitempty"`
	SoldByPartnerBranchName                    *string  `protobuf:"bytes,163,opt,name=sold_by_partner_branch_name,json=soldByPartnerBranchName,proto3,oneof" json:"sold_by_partner_branch_name,omitempty"`
	SoldByPartnerName                          *string  `protobuf:"bytes,164,opt,name=sold_by_partner_name,json=soldByPartnerName,proto3,oneof" json:"sold_by_partner_name,omitempty"`
	Ssn                                        *string  `protobuf:"bytes,165,opt,name=ssn,proto3,oneof" json:"ssn,omitempty"`
	Track_1_2Indicator                         *string  `protobuf:"bytes,166,opt,name=track_1_2_indicator,json=track12Indicator,proto3,oneof" json:"track_1_2_indicator,omitempty"`
	TrackICardOwner                            *string  `protobuf:"bytes,167,opt,name=track_i_card_owner,json=trackICardOwner,proto3,oneof" json:"track_i_card_owner,omitempty"`
	TransactionKey                             *string  `protobuf:"bytes,168,opt,name=transaction_key,json=transactionKey,proto3,oneof" json:"transaction_key,omitempty"`
	TransactionLocalDateTime                   *string  `protobuf:"bytes,169,opt,name=transaction_local_date_time,json=transactionLocalDateTime,proto3,oneof" json:"transaction_local_date_time,omitempty"`
	TransactionNormalizedDateTime              *string  `protobuf:"bytes,170,opt,name=transaction_normalized_date_time,json=transactionNormalizedDateTime,proto3,oneof" json:"transaction_normalized_date_time,omitempty"`
	TransactionType                            *string  `protobuf:"bytes,171,opt,name=transaction_type,json=transactionType,proto3,oneof" json:"transaction_type,omitempty"`
	TransferDebitCreditIdentifier              *int64   `protobuf:"varint,172,opt,name=transfer_debit_credit_identifier,json=transferDebitCreditIdentifier,proto3,oneof" json:"transfer_debit_credit_identifier,omitempty"`
	VisaRiskScore                              *string  `protobuf:"bytes,173,opt,name=visa_risk_score,json=visaRiskScore,proto3,oneof" json:"visa_risk_score,omitempty"`
}

func (x *InferenceRequest) Reset() {
	*x = InferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_input_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferenceRequest) ProtoMessage() {}

func (x *InferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_input_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferenceRequest.ProtoReflect.Descriptor instead.
func (*InferenceRequest) Descriptor() ([]byte, []int) {
	return file_public_input_proto_rawDescGZIP(), []int{0}
}

func (x *InferenceRequest) GetAccountActivated() bool {
	if x != nil && x.AccountActivated != nil {
		return *x.AccountActivated
	}
	return false
}

func (x *InferenceRequest) GetAccountAvailableBalance() float32 {
	if x != nil && x.AccountAvailableBalance != nil {
		return *x.AccountAvailableBalance
	}
	return 0
}

func (x *InferenceRequest) GetAccountKey() string {
	if x != nil && x.AccountKey != nil {
		return *x.AccountKey
	}
	return ""
}

func (x *InferenceRequest) GetAccountLedgerBalance() float32 {
	if x != nil && x.AccountLedgerBalance != nil {
		return *x.AccountLedgerBalance
	}
	return 0
}

func (x *InferenceRequest) GetAccountOpenDate() string {
	if x != nil && x.AccountOpenDate != nil {
		return *x.AccountOpenDate
	}
	return ""
}

func (x *InferenceRequest) GetAccountOverdraftLimit() float32 {
	if x != nil && x.AccountOverdraftLimit != nil {
		return *x.AccountOverdraftLimit
	}
	return 0
}

func (x *InferenceRequest) GetAccountReopenDate() string {
	if x != nil && x.AccountReopenDate != nil {
		return *x.AccountReopenDate
	}
	return ""
}

func (x *InferenceRequest) GetAccountStatus() string {
	if x != nil && x.AccountStatus != nil {
		return *x.AccountStatus
	}
	return ""
}

func (x *InferenceRequest) GetAccountType() string {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return ""
}

func (x *InferenceRequest) GetAuthenticationMethodUsed() string {
	if x != nil && x.AuthenticationMethodUsed != nil {
		return *x.AuthenticationMethodUsed
	}
	return ""
}

func (x *InferenceRequest) GetAuthorizationDecisionCd() string {
	if x != nil && x.AuthorizationDecisionCd != nil {
		return *x.AuthorizationDecisionCd
	}
	return ""
}

func (x *InferenceRequest) GetBankName() string {
	if x != nil && x.BankName != nil {
		return *x.BankName
	}
	return ""
}

func (x *InferenceRequest) GetCardActivationDate() string {
	if x != nil && x.CardActivationDate != nil {
		return *x.CardActivationDate
	}
	return ""
}

func (x *InferenceRequest) GetCardAddressCity() string {
	if x != nil && x.CardAddressCity != nil {
		return *x.CardAddressCity
	}
	return ""
}

func (x *InferenceRequest) GetCardAddressLatitude() float32 {
	if x != nil && x.CardAddressLatitude != nil {
		return *x.CardAddressLatitude
	}
	return 0
}

func (x *InferenceRequest) GetCardAddressLine_1() string {
	if x != nil && x.CardAddressLine_1 != nil {
		return *x.CardAddressLine_1
	}
	return ""
}

func (x *InferenceRequest) GetCardAddressLine_2() string {
	if x != nil && x.CardAddressLine_2 != nil {
		return *x.CardAddressLine_2
	}
	return ""
}

func (x *InferenceRequest) GetCardAddressLongitude() float32 {
	if x != nil && x.CardAddressLongitude != nil {
		return *x.CardAddressLongitude
	}
	return 0
}

func (x *InferenceRequest) GetCardAddressState() string {
	if x != nil && x.CardAddressState != nil {
		return *x.CardAddressState
	}
	return ""
}

func (x *InferenceRequest) GetCardAddressZip() string {
	if x != nil && x.CardAddressZip != nil {
		return *x.CardAddressZip
	}
	return ""
}

func (x *InferenceRequest) GetCardAssociation() string {
	if x != nil && x.CardAssociation != nil {
		return *x.CardAssociation
	}
	return ""
}

func (x *InferenceRequest) GetCardAttachmentDate() string {
	if x != nil && x.CardAttachmentDate != nil {
		return *x.CardAttachmentDate
	}
	return ""
}

func (x *InferenceRequest) GetCardBin() string {
	if x != nil && x.CardBin != nil {
		return *x.CardBin
	}
	return ""
}

func (x *InferenceRequest) GetCardBranch() string {
	if x != nil && x.CardBranch != nil {
		return *x.CardBranch
	}
	return ""
}

func (x *InferenceRequest) GetCardClosedDate() string {
	if x != nil && x.CardClosedDate != nil {
		return *x.CardClosedDate
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceAcquiringInstitutionId() string {
	if x != nil && x.CardDeviceAcquiringInstitutionId != nil {
		return *x.CardDeviceAcquiringInstitutionId
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceBranch() string {
	if x != nil && x.CardDeviceBranch != nil {
		return *x.CardDeviceBranch
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceCardAcceptorId() string {
	if x != nil && x.CardDeviceCardAcceptorId != nil {
		return *x.CardDeviceCardAcceptorId
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceCity() string {
	if x != nil && x.CardDeviceCity != nil {
		return *x.CardDeviceCity
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceCountryCd() string {
	if x != nil && x.CardDeviceCountryCd != nil {
		return *x.CardDeviceCountryCd
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceMerchantCategoryCd() string {
	if x != nil && x.CardDeviceMerchantCategoryCd != nil {
		return *x.CardDeviceMerchantCategoryCd
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceNameLocation() string {
	if x != nil && x.CardDeviceNameLocation != nil {
		return *x.CardDeviceNameLocation
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceOnUsInd() bool {
	if x != nil && x.CardDeviceOnUsInd != nil {
		return *x.CardDeviceOnUsInd
	}
	return false
}

func (x *InferenceRequest) GetCardDeviceOwnerName() string {
	if x != nil && x.CardDeviceOwnerName != nil {
		return *x.CardDeviceOwnerName
	}
	return ""
}

func (x *InferenceRequest) GetCardDevicePanEntryModeCd() string {
	if x != nil && x.CardDevicePanEntryModeCd != nil {
		return *x.CardDevicePanEntryModeCd
	}
	return ""
}

func (x *InferenceRequest) GetCardDevicePinEntryCapability() string {
	if x != nil && x.CardDevicePinEntryCapability != nil {
		return *x.CardDevicePinEntryCapability
	}
	return ""
}

func (x *InferenceRequest) GetCardDevicePosTerminalAttendanceIndicatorCd() string {
	if x != nil && x.CardDevicePosTerminalAttendanceIndicatorCd != nil {
		return *x.CardDevicePosTerminalAttendanceIndicatorCd
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceState() string {
	if x != nil && x.CardDeviceState != nil {
		return *x.CardDeviceState
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceTerminalId() string {
	if x != nil && x.CardDeviceTerminalId != nil {
		return *x.CardDeviceTerminalId
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceTransactionCategoryCd() string {
	if x != nil && x.CardDeviceTransactionCategoryCd != nil {
		return *x.CardDeviceTransactionCategoryCd
	}
	return ""
}

func (x *InferenceRequest) GetCardDeviceZip() string {
	if x != nil && x.CardDeviceZip != nil {
		return *x.CardDeviceZip
	}
	return ""
}

func (x *InferenceRequest) GetCardExpirationDate() string {
	if x != nil && x.CardExpirationDate != nil {
		return *x.CardExpirationDate
	}
	return ""
}

func (x *InferenceRequest) GetCardIccCardInd() bool {
	if x != nil && x.CardIccCardInd != nil {
		return *x.CardIccCardInd
	}
	return false
}

func (x *InferenceRequest) GetCardIssuedDate() string {
	if x != nil && x.CardIssuedDate != nil {
		return *x.CardIssuedDate
	}
	return ""
}

func (x *InferenceRequest) GetCardKey() string {
	if x != nil && x.CardKey != nil {
		return *x.CardKey
	}
	return ""
}

func (x *InferenceRequest) GetCardPanForDisplay() string {
	if x != nil && x.CardPanForDisplay != nil {
		return *x.CardPanForDisplay
	}
	return ""
}

func (x *InferenceRequest) GetCardPresenceInd() bool {
	if x != nil && x.CardPresenceInd != nil {
		return *x.CardPresenceInd
	}
	return false
}

func (x *InferenceRequest) GetCardPurpose() int32 {
	if x != nil && x.CardPurpose != nil {
		return *x.CardPurpose
	}
	return 0
}

func (x *InferenceRequest) GetCardStatus() string {
	if x != nil && x.CardStatus != nil {
		return *x.CardStatus
	}
	return ""
}

func (x *InferenceRequest) GetCardType() string {
	if x != nil && x.CardType != nil {
		return *x.CardType
	}
	return ""
}

func (x *InferenceRequest) GetCardVerificationTypeCd() string {
	if x != nil && x.CardVerificationTypeCd != nil {
		return *x.CardVerificationTypeCd
	}
	return ""
}

func (x *InferenceRequest) GetCardholderPresenceIndicatorCd() string {
	if x != nil && x.CardholderPresenceIndicatorCd != nil {
		return *x.CardholderPresenceIndicatorCd
	}
	return ""
}

func (x *InferenceRequest) GetCashbackAmountAsEntered() float32 {
	if x != nil && x.CashbackAmountAsEntered != nil {
		return *x.CashbackAmountAsEntered
	}
	return 0
}

func (x *InferenceRequest) GetCashbackAmountInNormalizedCurrency() float32 {
	if x != nil && x.CashbackAmountInNormalizedCurrency != nil {
		return *x.CashbackAmountInNormalizedCurrency
	}
	return 0
}

func (x *InferenceRequest) GetCashbackInd() bool {
	if x != nil && x.CashbackInd != nil {
		return *x.CashbackInd
	}
	return false
}

func (x *InferenceRequest) GetCb_18() bool {
	if x != nil && x.Cb_18 != nil {
		return *x.Cb_18
	}
	return false
}

func (x *InferenceRequest) GetCb_19() bool {
	if x != nil && x.Cb_19 != nil {
		return *x.Cb_19
	}
	return false
}

func (x *InferenceRequest) GetCb_24() bool {
	if x != nil && x.Cb_24 != nil {
		return *x.Cb_24
	}
	return false
}

func (x *InferenceRequest) GetCb_25() bool {
	if x != nil && x.Cb_25 != nil {
		return *x.Cb_25
	}
	return false
}

func (x *InferenceRequest) GetCd_1() string {
	if x != nil && x.Cd_1 != nil {
		return *x.Cd_1
	}
	return ""
}

func (x *InferenceRequest) GetCd_10() string {
	if x != nil && x.Cd_10 != nil {
		return *x.Cd_10
	}
	return ""
}

func (x *InferenceRequest) GetCd_11() string {
	if x != nil && x.Cd_11 != nil {
		return *x.Cd_11
	}
	return ""
}

func (x *InferenceRequest) GetCd_19() string {
	if x != nil && x.Cd_19 != nil {
		return *x.Cd_19
	}
	return ""
}

func (x *InferenceRequest) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *InferenceRequest) GetCipApprovalDate() string {
	if x != nil && x.CipApprovalDate != nil {
		return *x.CipApprovalDate
	}
	return ""
}

func (x *InferenceRequest) GetCipStatus() string {
	if x != nil && x.CipStatus != nil {
		return *x.CipStatus
	}
	return ""
}

func (x *InferenceRequest) GetContactlessInd() bool {
	if x != nil && x.ContactlessInd != nil {
		return *x.ContactlessInd
	}
	return false
}

func (x *InferenceRequest) GetCreationDate() string {
	if x != nil && x.CreationDate != nil {
		return *x.CreationDate
	}
	return ""
}

func (x *InferenceRequest) GetCs_150() string {
	if x != nil && x.Cs_150 != nil {
		return *x.Cs_150
	}
	return ""
}

func (x *InferenceRequest) GetCs_151() string {
	if x != nil && x.Cs_151 != nil {
		return *x.Cs_151
	}
	return ""
}

func (x *InferenceRequest) GetCs_152() string {
	if x != nil && x.Cs_152 != nil {
		return *x.Cs_152
	}
	return ""
}

func (x *InferenceRequest) GetCs_153() string {
	if x != nil && x.Cs_153 != nil {
		return *x.Cs_153
	}
	return ""
}

func (x *InferenceRequest) GetCs_154() string {
	if x != nil && x.Cs_154 != nil {
		return *x.Cs_154
	}
	return ""
}

func (x *InferenceRequest) GetCs_155() string {
	if x != nil && x.Cs_155 != nil {
		return *x.Cs_155
	}
	return ""
}

func (x *InferenceRequest) GetCs_156() string {
	if x != nil && x.Cs_156 != nil {
		return *x.Cs_156
	}
	return ""
}

func (x *InferenceRequest) GetCs_157() string {
	if x != nil && x.Cs_157 != nil {
		return *x.Cs_157
	}
	return ""
}

func (x *InferenceRequest) GetCs_158() string {
	if x != nil && x.Cs_158 != nil {
		return *x.Cs_158
	}
	return ""
}

func (x *InferenceRequest) GetCs_161() string {
	if x != nil && x.Cs_161 != nil {
		return *x.Cs_161
	}
	return ""
}

func (x *InferenceRequest) GetCs_162() string {
	if x != nil && x.Cs_162 != nil {
		return *x.Cs_162
	}
	return ""
}

func (x *InferenceRequest) GetCs_163() string {
	if x != nil && x.Cs_163 != nil {
		return *x.Cs_163
	}
	return ""
}

func (x *InferenceRequest) GetCs_164() string {
	if x != nil && x.Cs_164 != nil {
		return *x.Cs_164
	}
	return ""
}

func (x *InferenceRequest) GetCs_165() string {
	if x != nil && x.Cs_165 != nil {
		return *x.Cs_165
	}
	return ""
}

func (x *InferenceRequest) GetCs_169() string {
	if x != nil && x.Cs_169 != nil {
		return *x.Cs_169
	}
	return ""
}

func (x *InferenceRequest) GetCs_36() string {
	if x != nil && x.Cs_36 != nil {
		return *x.Cs_36
	}
	return ""
}

func (x *InferenceRequest) GetCs_37() string {
	if x != nil && x.Cs_37 != nil {
		return *x.Cs_37
	}
	return ""
}

func (x *InferenceRequest) GetCs_38() string {
	if x != nil && x.Cs_38 != nil {
		return *x.Cs_38
	}
	return ""
}

func (x *InferenceRequest) GetCs_39() string {
	if x != nil && x.Cs_39 != nil {
		return *x.Cs_39
	}
	return ""
}

func (x *InferenceRequest) GetCs_40() string {
	if x != nil && x.Cs_40 != nil {
		return *x.Cs_40
	}
	return ""
}

func (x *InferenceRequest) GetCs_46() string {
	if x != nil && x.Cs_46 != nil {
		return *x.Cs_46
	}
	return ""
}

func (x *InferenceRequest) GetCs_47() string {
	if x != nil && x.Cs_47 != nil {
		return *x.Cs_47
	}
	return ""
}

func (x *InferenceRequest) GetCs_75() string {
	if x != nil && x.Cs_75 != nil {
		return *x.Cs_75
	}
	return ""
}

func (x *InferenceRequest) GetCsl_10() string {
	if x != nil && x.Csl_10 != nil {
		return *x.Csl_10
	}
	return ""
}

func (x *InferenceRequest) GetCsl_21() string {
	if x != nil && x.Csl_21 != nil {
		return *x.Csl_21
	}
	return ""
}

func (x *InferenceRequest) GetCsl_22() string {
	if x != nil && x.Csl_22 != nil {
		return *x.Csl_22
	}
	return ""
}

func (x *InferenceRequest) GetCsl_23() string {
	if x != nil && x.Csl_23 != nil {
		return *x.Csl_23
	}
	return ""
}

func (x *InferenceRequest) GetCsl_24() string {
	if x != nil && x.Csl_24 != nil {
		return *x.Csl_24
	}
	return ""
}

func (x *InferenceRequest) GetCurrencyCd() string {
	if x != nil && x.CurrencyCd != nil {
		return *x.CurrencyCd
	}
	return ""
}

func (x *InferenceRequest) GetElectronicCommerceFlag() string {
	if x != nil && x.ElectronicCommerceFlag != nil {
		return *x.ElectronicCommerceFlag
	}
	return ""
}

func (x *InferenceRequest) GetEmbossedCardOwnerName() string {
	if x != nil && x.EmbossedCardOwnerName != nil {
		return *x.EmbossedCardOwnerName
	}
	return ""
}

func (x *InferenceRequest) GetFeeAdvantagePlan() bool {
	if x != nil && x.FeeAdvantagePlan != nil {
		return *x.FeeAdvantagePlan
	}
	return false
}

func (x *InferenceRequest) GetFeeAmountInOriginalCurrency() float32 {
	if x != nil && x.FeeAmountInOriginalCurrency != nil {
		return *x.FeeAmountInOriginalCurrency
	}
	return 0
}

func (x *InferenceRequest) GetFeeAmountInRegionNormalizedCurrency() float32 {
	if x != nil && x.FeeAmountInRegionNormalizedCurrency != nil {
		return *x.FeeAmountInRegionNormalizedCurrency
	}
	return 0
}

func (x *InferenceRequest) GetLimitedUseAccount() bool {
	if x != nil && x.LimitedUseAccount != nil {
		return *x.LimitedUseAccount
	}
	return false
}

func (x *InferenceRequest) GetMessagePurpose() string {
	if x != nil && x.MessagePurpose != nil {
		return *x.MessagePurpose
	}
	return ""
}

func (x *InferenceRequest) GetMessageType() string {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return ""
}

func (x *InferenceRequest) GetNetworkId() string {
	if x != nil && x.NetworkId != nil {
		return *x.NetworkId
	}
	return ""
}

func (x *InferenceRequest) GetOnlineOriginatedAccount() bool {
	if x != nil && x.OnlineOriginatedAccount != nil {
		return *x.OnlineOriginatedAccount
	}
	return false
}

func (x *InferenceRequest) GetOnlineTransactionIndicator() bool {
	if x != nil && x.OnlineTransactionIndicator != nil {
		return *x.OnlineTransactionIndicator
	}
	return false
}

func (x *InferenceRequest) GetPanCountryCd() string {
	if x != nil && x.PanCountryCd != nil {
		return *x.PanCountryCd
	}
	return ""
}

func (x *InferenceRequest) GetPartnerEmployee() bool {
	if x != nil && x.PartnerEmployee != nil {
		return *x.PartnerEmployee
	}
	return false
}

func (x *InferenceRequest) GetPartyAddressLine_1() string {
	if x != nil && x.PartyAddressLine_1 != nil {
		return *x.PartyAddressLine_1
	}
	return ""
}

func (x *InferenceRequest) GetPartyAddressLine_2() string {
	if x != nil && x.PartyAddressLine_2 != nil {
		return *x.PartyAddressLine_2
	}
	return ""
}

func (x *InferenceRequest) GetPartyAddressUpdateDate() string {
	if x != nil && x.PartyAddressUpdateDate != nil {
		return *x.PartyAddressUpdateDate
	}
	return ""
}

func (x *InferenceRequest) GetPartyBirthIncorpDate() string {
	if x != nil && x.PartyBirthIncorpDate != nil {
		return *x.PartyBirthIncorpDate
	}
	return ""
}

func (x *InferenceRequest) GetPartyCity() string {
	if x != nil && x.PartyCity != nil {
		return *x.PartyCity
	}
	return ""
}

func (x *InferenceRequest) GetPartyCountryCd() string {
	if x != nil && x.PartyCountryCd != nil {
		return *x.PartyCountryCd
	}
	return ""
}

func (x *InferenceRequest) GetPartyEmail() string {
	if x != nil && x.PartyEmail != nil {
		return *x.PartyEmail
	}
	return ""
}

func (x *InferenceRequest) GetPartyEmailUpdateDate() string {
	if x != nil && x.PartyEmailUpdateDate != nil {
		return *x.PartyEmailUpdateDate
	}
	return ""
}

func (x *InferenceRequest) GetPartyInfoUpdateDate() string {
	if x != nil && x.PartyInfoUpdateDate != nil {
		return *x.PartyInfoUpdateDate
	}
	return ""
}

func (x *InferenceRequest) GetPartyKey() string {
	if x != nil && x.PartyKey != nil {
		return *x.PartyKey
	}
	return ""
}

func (x *InferenceRequest) GetPartyLastName() string {
	if x != nil && x.PartyLastName != nil {
		return *x.PartyLastName
	}
	return ""
}

func (x *InferenceRequest) GetPartyLatitude() float32 {
	if x != nil && x.PartyLatitude != nil {
		return *x.PartyLatitude
	}
	return 0
}

func (x *InferenceRequest) GetPartyLongitude() float32 {
	if x != nil && x.PartyLongitude != nil {
		return *x.PartyLongitude
	}
	return 0
}

func (x *InferenceRequest) GetPartyName() string {
	if x != nil && x.PartyName != nil {
		return *x.PartyName
	}
	return ""
}

func (x *InferenceRequest) GetPartyNameUpdateDate() string {
	if x != nil && x.PartyNameUpdateDate != nil {
		return *x.PartyNameUpdateDate
	}
	return ""
}

func (x *InferenceRequest) GetPartyOnlineServiceJoinDate() string {
	if x != nil && x.PartyOnlineServiceJoinDate != nil {
		return *x.PartyOnlineServiceJoinDate
	}
	return ""
}

func (x *InferenceRequest) GetPartyPhone() string {
	if x != nil && x.PartyPhone != nil {
		return *x.PartyPhone
	}
	return ""
}

func (x *InferenceRequest) GetPartyPhoneUpdateDate() string {
	if x != nil && x.PartyPhoneUpdateDate != nil {
		return *x.PartyPhoneUpdateDate
	}
	return ""
}

func (x *InferenceRequest) GetPartyState() string {
	if x != nil && x.PartyState != nil {
		return *x.PartyState
	}
	return ""
}

func (x *InferenceRequest) GetPartyZip() string {
	if x != nil && x.PartyZip != nil {
		return *x.PartyZip
	}
	return ""
}

func (x *InferenceRequest) GetPaycardEnrollmentDate() string {
	if x != nil && x.PaycardEnrollmentDate != nil {
		return *x.PaycardEnrollmentDate
	}
	return ""
}

func (x *InferenceRequest) GetProgramBranchAddressCity() string {
	if x != nil && x.ProgramBranchAddressCity != nil {
		return *x.ProgramBranchAddressCity
	}
	return ""
}

func (x *InferenceRequest) GetProgramBranchAddressLine_1() string {
	if x != nil && x.ProgramBranchAddressLine_1 != nil {
		return *x.ProgramBranchAddressLine_1
	}
	return ""
}

func (x *InferenceRequest) GetProgramBranchAddressLine_2() string {
	if x != nil && x.ProgramBranchAddressLine_2 != nil {
		return *x.ProgramBranchAddressLine_2
	}
	return ""
}

func (x *InferenceRequest) GetProgramBranchAddressState() string {
	if x != nil && x.ProgramBranchAddressState != nil {
		return *x.ProgramBranchAddressState
	}
	return ""
}

func (x *InferenceRequest) GetProgramBranchAddressZip() string {
	if x != nil && x.ProgramBranchAddressZip != nil {
		return *x.ProgramBranchAddressZip
	}
	return ""
}

func (x *InferenceRequest) GetProgramBranchLatitude() float32 {
	if x != nil && x.ProgramBranchLatitude != nil {
		return *x.ProgramBranchLatitude
	}
	return 0
}

func (x *InferenceRequest) GetProgramBranchLongitude() float32 {
	if x != nil && x.ProgramBranchLongitude != nil {
		return *x.ProgramBranchLongitude
	}
	return 0
}

func (x *InferenceRequest) GetProgramBranchVisible() bool {
	if x != nil && x.ProgramBranchVisible != nil {
		return *x.ProgramBranchVisible
	}
	return false
}

func (x *InferenceRequest) GetProgramChannelName() string {
	if x != nil && x.ProgramChannelName != nil {
		return *x.ProgramChannelName
	}
	return ""
}

func (x *InferenceRequest) GetProgramParentPartnerName() string {
	if x != nil && x.ProgramParentPartnerName != nil {
		return *x.ProgramParentPartnerName
	}
	return ""
}

func (x *InferenceRequest) GetProgramPartnerBranchName() string {
	if x != nil && x.ProgramPartnerBranchName != nil {
		return *x.ProgramPartnerBranchName
	}
	return ""
}

func (x *InferenceRequest) GetProgramPartnerName() string {
	if x != nil && x.ProgramPartnerName != nil {
		return *x.ProgramPartnerName
	}
	return ""
}

func (x *InferenceRequest) GetRecurringPaymentIndicator() int64 {
	if x != nil && x.RecurringPaymentIndicator != nil {
		return *x.RecurringPaymentIndicator
	}
	return 0
}

func (x *InferenceRequest) GetRejectedTransactionInd() bool {
	if x != nil && x.RejectedTransactionInd != nil {
		return *x.RejectedTransactionInd
	}
	return false
}

func (x *InferenceRequest) GetRejectedTypeCd() string {
	if x != nil && x.RejectedTypeCd != nil {
		return *x.RejectedTypeCd
	}
	return ""
}

func (x *InferenceRequest) GetRequestedAmountAsEntered() float32 {
	if x != nil && x.RequestedAmountAsEntered != nil {
		return *x.RequestedAmountAsEntered
	}
	return 0
}

func (x *InferenceRequest) GetRequestedAmountInRegionNormalizedCurrency() float32 {
	if x != nil && x.RequestedAmountInRegionNormalizedCurrency != nil {
		return *x.RequestedAmountInRegionNormalizedCurrency
	}
	return 0
}

func (x *InferenceRequest) GetRequestedAmountNormalizedCurrency() float32 {
	if x != nil && x.RequestedAmountNormalizedCurrency != nil {
		return *x.RequestedAmountNormalizedCurrency
	}
	return 0
}

func (x *InferenceRequest) GetResendDueToFailureInd() bool {
	if x != nil && x.ResendDueToFailureInd != nil {
		return *x.ResendDueToFailureInd
	}
	return false
}

func (x *InferenceRequest) GetSecure_3DResponseCd() string {
	if x != nil && x.Secure_3DResponseCd != nil {
		return *x.Secure_3DResponseCd
	}
	return ""
}

func (x *InferenceRequest) GetShippingModifiedDate() string {
	if x != nil && x.ShippingModifiedDate != nil {
		return *x.ShippingModifiedDate
	}
	return ""
}

func (x *InferenceRequest) GetSoldByBranchAddressCity() string {
	if x != nil && x.SoldByBranchAddressCity != nil {
		return *x.SoldByBranchAddressCity
	}
	return ""
}

func (x *InferenceRequest) GetSoldByBranchAddressLine_1() string {
	if x != nil && x.SoldByBranchAddressLine_1 != nil {
		return *x.SoldByBranchAddressLine_1
	}
	return ""
}

func (x *InferenceRequest) GetSoldByBranchAddressLine_2() string {
	if x != nil && x.SoldByBranchAddressLine_2 != nil {
		return *x.SoldByBranchAddressLine_2
	}
	return ""
}

func (x *InferenceRequest) GetSoldByBranchAddressState() string {
	if x != nil && x.SoldByBranchAddressState != nil {
		return *x.SoldByBranchAddressState
	}
	return ""
}

func (x *InferenceRequest) GetSoldByBranchAddressZip() string {
	if x != nil && x.SoldByBranchAddressZip != nil {
		return *x.SoldByBranchAddressZip
	}
	return ""
}

func (x *InferenceRequest) GetSoldByBranchLatitude() float32 {
	if x != nil && x.SoldByBranchLatitude != nil {
		return *x.SoldByBranchLatitude
	}
	return 0
}

func (x *InferenceRequest) GetSoldByBranchLongitude() float32 {
	if x != nil && x.SoldByBranchLongitude != nil {
		return *x.SoldByBranchLongitude
	}
	return 0
}

func (x *InferenceRequest) GetSoldByBranchVisible() bool {
	if x != nil && x.SoldByBranchVisible != nil {
		return *x.SoldByBranchVisible
	}
	return false
}

func (x *InferenceRequest) GetSoldByChannelName() string {
	if x != nil && x.SoldByChannelName != nil {
		return *x.SoldByChannelName
	}
	return ""
}

func (x *InferenceRequest) GetSoldByParentPartnerName() string {
	if x != nil && x.SoldByParentPartnerName != nil {
		return *x.SoldByParentPartnerName
	}
	return ""
}

func (x *InferenceRequest) GetSoldByPartnerBranchName() string {
	if x != nil && x.SoldByPartnerBranchName != nil {
		return *x.SoldByPartnerBranchName
	}
	return ""
}

func (x *InferenceRequest) GetSoldByPartnerName() string {
	if x != nil && x.SoldByPartnerName != nil {
		return *x.SoldByPartnerName
	}
	return ""
}

func (x *InferenceRequest) GetSsn() string {
	if x != nil && x.Ssn != nil {
		return *x.Ssn
	}
	return ""
}

func (x *InferenceRequest) GetTrack_1_2Indicator() string {
	if x != nil && x.Track_1_2Indicator != nil {
		return *x.Track_1_2Indicator
	}
	return ""
}

func (x *InferenceRequest) GetTrackICardOwner() string {
	if x != nil && x.TrackICardOwner != nil {
		return *x.TrackICardOwner
	}
	return ""
}

func (x *InferenceRequest) GetTransactionKey() string {
	if x != nil && x.TransactionKey != nil {
		return *x.TransactionKey
	}
	return ""
}

func (x *InferenceRequest) GetTransactionLocalDateTime() string {
	if x != nil && x.TransactionLocalDateTime != nil {
		return *x.TransactionLocalDateTime
	}
	return ""
}

func (x *InferenceRequest) GetTransactionNormalizedDateTime() string {
	if x != nil && x.TransactionNormalizedDateTime != nil {
		return *x.TransactionNormalizedDateTime
	}
	return ""
}

func (x *InferenceRequest) GetTransactionType() string {
	if x != nil && x.TransactionType != nil {
		return *x.TransactionType
	}
	return ""
}

func (x *InferenceRequest) GetTransferDebitCreditIdentifier() int64 {
	if x != nil && x.TransferDebitCreditIdentifier != nil {
		return *x.TransferDebitCreditIdentifier
	}
	return 0
}

func (x *InferenceRequest) GetVisaRiskScore() string {
	if x != nil && x.VisaRiskScore != nil {
		return *x.VisaRiskScore
	}
	return ""
}

type InferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg            string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TransactionKey string `protobuf:"bytes,3,opt,name=transaction_key,json=transactionKey,proto3" json:"transaction_key,omitempty"`
	Model          string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Score          int32  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *InferenceResponse) Reset() {
	*x = InferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_input_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferenceResponse) ProtoMessage() {}

func (x *InferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_input_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferenceResponse.ProtoReflect.Descriptor instead.
func (*InferenceResponse) Descriptor() ([]byte, []int) {
	return file_public_input_proto_rawDescGZIP(), []int{1}
}

func (x *InferenceResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *InferenceResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *InferenceResponse) GetTransactionKey() string {
	if x != nil {
		return x.TransactionKey
	}
	return ""
}

func (x *InferenceResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *InferenceResponse) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type DatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerDate string `protobuf:"bytes,1,opt,name=trigger_date,json=triggerDate,proto3" json:"trigger_date,omitempty"`
}

func (x *DatabaseRequest) Reset() {
	*x = DatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_input_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseRequest) ProtoMessage() {}

func (x *DatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_input_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseRequest.ProtoReflect.Descriptor instead.
func (*DatabaseRequest) Descriptor() ([]byte, []int) {
	return file_public_input_proto_rawDescGZIP(), []int{2}
}

func (x *DatabaseRequest) GetTriggerDate() string {
	if x != nil {
		return x.TriggerDate
	}
	return ""
}

type FeatureStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *FeatureStorageResponse) Reset() {
	*x = FeatureStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_input_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureStorageResponse) ProtoMessage() {}

func (x *FeatureStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_input_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureStorageResponse.ProtoReflect.Descriptor instead.
func (*FeatureStorageResponse) Descriptor() ([]byte, []int) {
	return file_public_input_proto_rawDescGZIP(), []int{3}
}

func (x *FeatureStorageResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FeatureStorageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_public_input_proto protoreflect.FileDescriptor

var file_public_input_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xbc, 0x63, 0x0a, 0x10, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0a, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0e, 0x52, 0x13, 0x63, 0x61, 0x72, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e,
	0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x32, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x10, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x48, 0x11, 0x52, 0x14, 0x63, 0x61, 0x72,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x12, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x13, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x16, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x17, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52,
	0x0e, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x53, 0x0a, 0x24, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x19, 0x52, 0x20, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1b, 0x52, 0x18, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0e, 0x63, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x16, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d,
	0x52, 0x13, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x20, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1e, 0x52, 0x1c, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x43, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x16, 0x63, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x15, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x20, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x6e, 0x55, 0x73, 0x49, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x13,
	0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52,
	0x18, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x20,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x1c, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x30, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x64, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x2a, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x25, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x14, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x51, 0x0a, 0x23, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27,
	0x52, 0x1f, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52,
	0x0d, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5a, 0x69, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x29, 0x52, 0x12, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x63, 0x63, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x2a, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x49, 0x63, 0x63, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2b, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6e,
	0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x2e, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x2f, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x31, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x19, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x32, 0x52, 0x16, 0x63, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c,
	0x0a, 0x20, 0x63, 0x61, 0x72, 0x64, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x1d, 0x63, 0x61, 0x72, 0x64,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a,
	0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x34, 0x52, 0x17, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57,
	0x0a, 0x26, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x02, 0x48, 0x35,
	0x52, 0x22, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x61, 0x73, 0x68, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x48, 0x36, 0x52,
	0x0b, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x05, 0x63, 0x62, 0x5f, 0x31, 0x38, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x48, 0x37,
	0x52, 0x04, 0x63, 0x62, 0x31, 0x38, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x62, 0x5f,
	0x31, 0x39, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x48, 0x38, 0x52, 0x04, 0x63, 0x62, 0x31, 0x39,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x62, 0x5f, 0x32, 0x34, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x39, 0x52, 0x04, 0x63, 0x62, 0x32, 0x34, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x05, 0x63, 0x62, 0x5f, 0x32, 0x35, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3a, 0x52, 0x04,
	0x63, 0x62, 0x32, 0x35, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x04, 0x63, 0x64, 0x5f, 0x31, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x03, 0x63, 0x64, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x05, 0x63, 0x64, 0x5f, 0x31, 0x30, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3c,
	0x52, 0x04, 0x63, 0x64, 0x31, 0x30, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x64, 0x5f,
	0x31, 0x31, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3d, 0x52, 0x04, 0x63, 0x64, 0x31, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x64, 0x5f, 0x31, 0x39, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x3e, 0x52, 0x04, 0x63, 0x64, 0x31, 0x39, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3f,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x63, 0x69, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x0f, 0x63, 0x69, 0x70, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x41, 0x52, 0x09, 0x63, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x6e, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x48, 0x42, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x43, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f,
	0x31, 0x35, 0x30, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x48, 0x44, 0x52, 0x05, 0x63, 0x73, 0x31,
	0x35, 0x30, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x31, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x45, 0x52, 0x05, 0x63, 0x73, 0x31, 0x35, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x32, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x46, 0x52, 0x05, 0x63, 0x73, 0x31, 0x35, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x33, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x48, 0x47, 0x52,
	0x05, 0x63, 0x73, 0x31, 0x35, 0x33, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f,
	0x31, 0x35, 0x34, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52, 0x05, 0x63, 0x73, 0x31,
	0x35, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x35, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x49, 0x52, 0x05, 0x63, 0x73, 0x31, 0x35, 0x35, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x36, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x4a, 0x52, 0x05, 0x63, 0x73, 0x31, 0x35, 0x36, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x37, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4b, 0x52,
	0x05, 0x63, 0x73, 0x31, 0x35, 0x37, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f,
	0x31, 0x35, 0x38, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4c, 0x52, 0x05, 0x63, 0x73, 0x31,
	0x35, 0x38, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f, 0x31, 0x36, 0x31, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4d, 0x52, 0x05, 0x63, 0x73, 0x31, 0x36, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f, 0x31, 0x36, 0x32, 0x18, 0x4f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x4e, 0x52, 0x05, 0x63, 0x73, 0x31, 0x36, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x63, 0x73, 0x5f, 0x31, 0x36, 0x33, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4f, 0x52,
	0x05, 0x63, 0x73, 0x31, 0x36, 0x33, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f,
	0x31, 0x36, 0x34, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x48, 0x50, 0x52, 0x05, 0x63, 0x73, 0x31,
	0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f, 0x31, 0x36, 0x35, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x09, 0x48, 0x51, 0x52, 0x05, 0x63, 0x73, 0x31, 0x36, 0x35, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x5f, 0x31, 0x36, 0x39, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x52, 0x52, 0x05, 0x63, 0x73, 0x31, 0x36, 0x39, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x05, 0x63, 0x73, 0x5f, 0x33, 0x36, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x48, 0x53, 0x52, 0x04,
	0x63, 0x73, 0x33, 0x36, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x73, 0x5f, 0x33, 0x37,
	0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x48, 0x54, 0x52, 0x04, 0x63, 0x73, 0x33, 0x37, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x73, 0x5f, 0x33, 0x38, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x55, 0x52, 0x04, 0x63, 0x73, 0x33, 0x38, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x63,
	0x73, 0x5f, 0x33, 0x39, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x48, 0x56, 0x52, 0x04, 0x63, 0x73,
	0x33, 0x39, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x73, 0x5f, 0x34, 0x30, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x57, 0x52, 0x04, 0x63, 0x73, 0x34, 0x30, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x05, 0x63, 0x73, 0x5f, 0x34, 0x36, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x48, 0x58,
	0x52, 0x04, 0x63, 0x73, 0x34, 0x36, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x73, 0x5f,
	0x34, 0x37, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x59, 0x52, 0x04, 0x63, 0x73, 0x34, 0x37,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x73, 0x5f, 0x37, 0x35, 0x18, 0x5b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x5a, 0x52, 0x04, 0x63, 0x73, 0x37, 0x35, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x63, 0x73, 0x6c, 0x5f, 0x31, 0x30, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5b, 0x52,
	0x05, 0x63, 0x73, 0x6c, 0x31, 0x30, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x6c,
	0x5f, 0x32, 0x31, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5c, 0x52, 0x05, 0x63, 0x73, 0x6c,
	0x32, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x6c, 0x5f, 0x32, 0x32, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5d, 0x52, 0x05, 0x63, 0x73, 0x6c, 0x32, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x73, 0x6c, 0x5f, 0x32, 0x33, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x5e, 0x52, 0x05, 0x63, 0x73, 0x6c, 0x32, 0x33, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x63, 0x73, 0x6c, 0x5f, 0x32, 0x34, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x48, 0x5f, 0x52,
	0x05, 0x63, 0x73, 0x6c, 0x32, 0x34, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x48, 0x60,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x18, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x62, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x61, 0x52, 0x16, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x18, 0x65, 0x6d, 0x62, 0x6f, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x62, 0x52, 0x15, 0x65, 0x6d, 0x62, 0x6f, 0x73, 0x73, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x66, 0x65, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x48, 0x63, 0x52, 0x10, 0x66, 0x65, 0x65, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x49, 0x0a, 0x1f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x02, 0x48, 0x64, 0x52, 0x1b, 0x66, 0x65, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x28, 0x66, 0x65,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x02, 0x48, 0x65, 0x52, 0x23,
	0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x66, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x67, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x68, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x69, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x6a, 0x52, 0x17, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x6b, 0x52, 0x1a,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x70, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x64, 0x18,
	0x6d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6c, 0x52, 0x0c, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x6d, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x31,
	0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6e, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x32, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x48, 0x6f, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x48, 0x70, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x72, 0x20, 0x01, 0x28, 0x09, 0x48, 0x71, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x73,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x64, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x48, 0x73,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x48, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x48, 0x75, 0x52, 0x14, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x77, 0x20, 0x01, 0x28, 0x09, 0x48, 0x76, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x77, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x48, 0x78, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x7a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x7a, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7b, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7c, 0x52, 0x13,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7d,
	0x52, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x7f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x7e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x7f, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x80, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x81,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5a, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x17, 0x70, 0x61, 0x79, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x82, 0x01, 0x52, 0x15, 0x70, 0x61, 0x79, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x1b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x83, 0x01, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x31, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x84, 0x01, 0x52, 0x19,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1d,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x32, 0x18, 0x86, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x85, 0x01, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e,
	0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x86, 0x01, 0x52,
	0x19, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a,
	0x1a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x7a, 0x69, 0x70, 0x18, 0x88, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x87, 0x01, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5a, 0x69, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x89, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x88, 0x01, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x8a, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x89, 0x01, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x8b, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x8a, 0x01, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x8b, 0x01,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x8c, 0x01,
	0x52, 0x18, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x1b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8e, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x8d, 0x01, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8f, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x8e, 0x01, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x90, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x8f, 0x01, 0x52, 0x19, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x18,
	0x91, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x90, 0x01, 0x52, 0x16, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x64, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x91, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x92, 0x01, 0x52, 0x18,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x94, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x93, 0x01, 0x52, 0x29, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x95, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x94, 0x01, 0x52, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x19, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x95, 0x01, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x75, 0x65, 0x54,
	0x6f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x33, 0x5f, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x64, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x96, 0x01, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x33, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x97, 0x01, 0x52, 0x14, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x98, 0x01, 0x52,
	0x17, 0x73, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x73,
	0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x31, 0x18, 0x9a, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x99, 0x01, 0x52, 0x18, 0x73, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x32, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x9a, 0x01, 0x52, 0x18,
	0x73, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x73,
	0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9c, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x9b, 0x01, 0x52, 0x18, 0x73, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x7a, 0x69, 0x70,
	0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x9c, 0x01, 0x52, 0x16, 0x73, 0x6f, 0x6c, 0x64,
	0x42, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5a,
	0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x17, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x9d, 0x01, 0x52, 0x14, 0x73, 0x6f, 0x6c, 0x64,
	0x42, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x18, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x9f, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x9e, 0x01, 0x52, 0x15, 0x73, 0x6f, 0x6c, 0x64, 0x42,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x16, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x9f, 0x01, 0x52, 0x13, 0x73, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x14, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0xa0,
	0x01, 0x52, 0x11, 0x73, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b, 0x73, 0x6f, 0x6c, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0xa1, 0x01,
	0x52, 0x17, 0x73, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b,
	0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa3, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0xa2, 0x01, 0x52, 0x17, 0x73, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x14, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0xa3, 0x01, 0x52, 0x11, 0x73, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x03, 0x73, 0x73, 0x6e,
	0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0xa4, 0x01, 0x52, 0x03, 0x73, 0x73, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x31, 0x5f, 0x32, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0xa5, 0x01, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x31, 0x32, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0xa7,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0xa6, 0x01, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x43, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0xa8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0xa7, 0x01, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa9, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0xa8, 0x01, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4e, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0xa9, 0x01,
	0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0xaa, 0x01,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0xab, 0x01, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x76, 0x69, 0x73, 0x61, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0xac,
	0x01, 0x52, 0x0d, 0x76, 0x69, 0x73, 0x61, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x31, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x32, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x27, 0x0a, 0x25, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x64, 0x42, 0x23, 0x0a, 0x21,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63,
	0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x64, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x33, 0x0a, 0x31, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x64,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x63, 0x63, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x64, 0x42, 0x23, 0x0a, 0x21, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x64,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42,
	0x29, 0x0a, 0x27, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x62, 0x5f, 0x31, 0x38, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x62, 0x5f, 0x31, 0x39, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x62, 0x5f, 0x32, 0x34, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x62,
	0x5f, 0x32, 0x35, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x64, 0x5f, 0x31, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x64, 0x5f, 0x31, 0x30, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x64, 0x5f, 0x31, 0x31,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x64, 0x5f, 0x31, 0x39, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x69, 0x70, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x30, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x5f, 0x31,
	0x35, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x33, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x5f,
	0x31, 0x35, 0x35, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x36, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x73, 0x5f, 0x31, 0x35, 0x37, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73,
	0x5f, 0x31, 0x35, 0x38, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x5f, 0x31, 0x36, 0x31, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x5f, 0x31, 0x36, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x73, 0x5f, 0x31, 0x36, 0x33, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x5f, 0x31, 0x36, 0x34,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x5f, 0x31, 0x36, 0x35, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x73, 0x5f, 0x31, 0x36, 0x39, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x73, 0x5f, 0x33, 0x36,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x73, 0x5f, 0x33, 0x37, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x73, 0x5f, 0x33, 0x38, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x73, 0x5f, 0x33, 0x39, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x73, 0x5f, 0x34, 0x30, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x73, 0x5f,
	0x34, 0x36, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x73, 0x5f, 0x34, 0x37, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x73, 0x5f, 0x37, 0x35, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x6c, 0x5f, 0x31,
	0x30, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x6c, 0x5f, 0x32, 0x31, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x73, 0x6c, 0x5f, 0x32, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x6c, 0x5f,
	0x32, 0x33, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x73, 0x6c, 0x5f, 0x32, 0x34, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x64, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65,
	0x6d, 0x62, 0x6f, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x42, 0x22,
	0x0a, 0x20, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x31, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x32, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x21, 0x0a, 0x1f,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x61,
	0x79, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x31, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x32, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x1e, 0x0a, 0x1c, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x64, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x42, 0x31, 0x0a, 0x2f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x33, 0x5f, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x63, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x31, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x32, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x7a, 0x69, 0x70, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x6f,
	0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x73, 0x73, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x31, 0x5f,
	0x32, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x23, 0x0a, 0x21, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x62, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x76, 0x69, 0x73, 0x61, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x34,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x4a, 0x0a, 0x16, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0xc4, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x56, 0x0a, 0x21, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x25, 0x55, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x15, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_input_proto_rawDescOnce sync.Once
	file_public_input_proto_rawDescData = file_public_input_proto_rawDesc
)

func file_public_input_proto_rawDescGZIP() []byte {
	file_public_input_proto_rawDescOnce.Do(func() {
		file_public_input_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_input_proto_rawDescData)
	})
	return file_public_input_proto_rawDescData
}

var file_public_input_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_public_input_proto_goTypes = []interface{}{
	(*InferenceRequest)(nil),       // 0: main.InferenceRequest
	(*InferenceResponse)(nil),      // 1: main.InferenceResponse
	(*DatabaseRequest)(nil),        // 2: main.DatabaseRequest
	(*FeatureStorageResponse)(nil), // 3: main.FeatureStorageResponse
}
var file_public_input_proto_depIdxs = []int32{
	0, // 0: main.Entrypoint.UnauthorizedTransactionClassifier:input_type -> main.InferenceRequest
	2, // 1: main.Entrypoint.UnauthorizedTransactionFeatureStorage:input_type -> main.DatabaseRequest
	1, // 2: main.Entrypoint.UnauthorizedTransactionClassifier:output_type -> main.InferenceResponse
	3, // 3: main.Entrypoint.UnauthorizedTransactionFeatureStorage:output_type -> main.FeatureStorageResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_public_input_proto_init() }
func file_public_input_proto_init() {
	if File_public_input_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_input_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_input_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_input_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_input_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_public_input_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_input_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_input_proto_goTypes,
		DependencyIndexes: file_public_input_proto_depIdxs,
		MessageInfos:      file_public_input_proto_msgTypes,
	}.Build()
	File_public_input_proto = out.File
	file_public_input_proto_rawDesc = nil
	file_public_input_proto_goTypes = nil
	file_public_input_proto_depIdxs = nil
}
