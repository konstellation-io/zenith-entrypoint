syntax = "proto3";

package main;

option go_package = "./publicpb";


message InferenceRequest{
    optional bool account_activated = 1;
    optional float account_available_balance = 2;
    optional string account_key = 3;
    optional float account_ledger_balance = 4;
    optional string account_open_date = 5;
    optional float account_overdraft_limit = 6;
    optional string account_reopen_date = 7;
    optional string account_status = 8;
    optional string account_type = 9;
    optional string authentication_method_used = 10;
    optional string authorization_decision_cd = 11;
    optional string bank_name = 12;
    optional string card_activation_date = 13;
    optional string card_address_city = 14;
    optional float card_address_latitude = 15;
    optional string card_address_line_1 = 16;
    optional string card_address_line_2 = 17;
    optional float card_address_longitude = 18;
    optional string card_address_state = 19;
    optional string card_address_zip = 20;
    optional string card_association = 21;
    optional string card_attachment_date = 22;
    optional string card_bin = 23;
    optional string card_branch = 24;
    optional string card_closed_date = 25;
    optional string card_device_acquiring_institution_id = 26;
    optional string card_device_branch = 27;
    optional string card_device_card_acceptor_id = 28;
    optional string card_device_city = 29;
    optional string card_device_country_cd = 30;
    optional string card_device_merchant_category_cd = 31;
    optional string card_device_name_location = 32;
    optional bool card_device_on_us_ind = 33;
    optional string card_device_owner_name = 34;
    optional string card_device_pan_entry_mode_cd = 35;
    optional string card_device_pin_entry_capability = 36;
    optional string card_device_pos_terminal_attendance_indicator_cd = 37;
    optional string card_device_state = 38;
    optional string card_device_terminal_id = 39;
    optional string card_device_transaction_category_cd = 40;
    optional string card_device_zip = 41;
    optional string card_expiration_date = 42;
    optional bool card_icc_card_ind = 43;
    optional string card_issued_date = 44;
    optional string card_key = 45;
    optional string card_pan_for_display = 46;
    optional bool card_presence_ind = 47;
    optional int32 card_purpose = 48;
    optional string card_status = 49;
    optional string card_type = 50;
    optional string card_verification_type_cd = 51;
    optional string cardholder_presence_indicator_cd = 52;
    optional float cashback_amount_as_entered = 53;
    optional float cashback_amount_in_normalized_currency = 54;
    optional bool cashback_ind = 55;
    optional bool cb_18 = 56;
    optional bool cb_19 = 57;
    optional bool cb_24 = 58;
    optional bool cb_25 = 59;
    optional string cd_1 = 60;
    optional string cd_10 = 61;
    optional string cd_11 = 62;
    optional string cd_19 = 63;
    optional string channel = 64;
    optional string cip_approval_date = 65;
    optional string cip_status = 66;
    optional bool contactless_ind = 67;
    optional string creation_date = 68;
    optional string cs_150 = 69;
    optional string cs_151 = 70;
    optional string cs_152 = 71;
    optional string cs_153 = 72;
    optional string cs_154 = 73;
    optional string cs_155 = 74;
    optional string cs_156 = 75;
    optional string cs_157 = 76;
    optional string cs_158 = 77;
    optional string cs_161 = 78;
    optional string cs_162 = 79;
    optional string cs_163 = 80;
    optional string cs_164 = 81;
    optional string cs_165 = 82;
    optional string cs_169 = 83;
    optional string cs_36 = 84;
    optional string cs_37 = 85;
    optional string cs_38 = 86;
    optional string cs_39 = 87;
    optional string cs_40 = 88;
    optional string cs_46 = 89;
    optional string cs_47 = 90;
    optional string cs_75 = 91;
    optional string csl_10 = 92;
    optional string csl_21 = 93;
    optional string csl_22 = 94;
    optional string csl_23 = 95;
    optional string csl_24 = 96;
    optional string currency_cd = 97;
    optional string electronic_commerce_flag = 98;
    optional string embossed_card_owner_name = 99;
    optional bool fee_advantage_plan = 100;
    optional float fee_amount_in_original_currency = 101;
    optional float fee_amount_in_region_normalized_currency = 102;
    optional bool limited_use_account = 103;
    optional string message_purpose = 104;
    optional string message_type = 105;
    optional string network_id = 106;
    optional bool online_originated_account = 107;
    optional bool online_transaction_indicator = 108;
    optional string pan_country_cd = 109;
    optional bool partner_employee = 110;
    optional string party_address_line_1 = 111;
    optional string party_address_line_2 = 112;
    optional string party_address_update_date = 113;
    optional string party_birth_incorp_date = 114;
    optional string party_city = 115;
    optional string party_country_cd = 116;
    optional string party_email = 117;
    optional string party_email_update_date = 118;
    optional string party_info_update_date = 119;
    optional string party_key = 120;
    optional string party_last_name = 121;
    optional float party_latitude = 122;
    optional float party_longitude = 123;
    optional string party_name = 124;
    optional string party_name_update_date = 125;
    optional string party_online_service_join_date = 126;
    optional string party_phone = 127;
    optional string party_phone_update_date = 128;
    optional string party_state = 129;
    optional string party_zip = 130;
    optional string paycard_enrollment_date = 131;
    optional string program_branch_address_city = 132;
    optional string program_branch_address_line_1 = 133;
    optional string program_branch_address_line_2 = 134;
    optional string program_branch_address_state = 135;
    optional string program_branch_address_zip = 136;
    optional float program_branch_latitude = 137;
    optional float program_branch_longitude = 138;
    optional bool program_branch_visible = 139;
    optional string program_channel_name = 140;
    optional string program_parent_partner_name = 141;
    optional string program_partner_branch_name = 142;
    optional string program_partner_name = 143;
    optional int64 recurring_payment_indicator = 144;
    optional bool rejected_transaction_ind = 145;
    optional string rejected_type_cd = 146;
    optional float requested_amount_as_entered = 147;
    optional float requested_amount_in_region_normalized_currency = 148;
    optional float requested_amount_normalized_currency = 149;
    optional bool resend_due_to_failure_ind = 150;
    optional string secure_3_d_response_cd = 151;
    optional string shipping_modified_date = 152;
    optional string sold_by_branch_address_city = 153;
    optional string sold_by_branch_address_line_1 = 154;
    optional string sold_by_branch_address_line_2 = 155;
    optional string sold_by_branch_address_state = 156;
    optional string sold_by_branch_address_zip = 157;
    optional float sold_by_branch_latitude = 158;
    optional float sold_by_branch_longitude = 159;
    optional bool sold_by_branch_visible = 160;
    optional string sold_by_channel_name = 161;
    optional string sold_by_parent_partner_name = 162;
    optional string sold_by_partner_branch_name = 163;
    optional string sold_by_partner_name = 164;
    optional string ssn = 165;
    optional string track_1_2_indicator = 166;
    optional string track_i_card_owner = 167;
    optional string transaction_key = 168;
    optional string transaction_local_date_time = 169;
    optional string transaction_normalized_date_time = 170;
    optional string transaction_type = 171;
    optional int64 transfer_debit_credit_identifier = 172;
    optional string visa_risk_score = 173;
}

message InferenceResponse{
    int32 status = 1;
    string msg = 2;
    string transaction_key = 3;
    string model = 4;
    int32 score = 5;
}

message DatabaseRequest {
    string trigger_date = 1;
}

message FeatureStorageResponse {
    int32 status = 1;
    string message = 2;
}

service Entrypoint {
    rpc UnauthorizedTransactionClassifier(InferenceRequest) returns (InferenceResponse) {};
    rpc UnauthorizedTransactionFeatureStorage(DatabaseRequest) returns (FeatureStorageResponse) {};
}
